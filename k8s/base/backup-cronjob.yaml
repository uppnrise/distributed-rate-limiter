apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis-backup
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: distributed-rate-limiter
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  timeZone: "UTC"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 3600  # 1 hour timeout
      template:
        metadata:
          labels:
            app.kubernetes.io/name: redis-backup
            app.kubernetes.io/component: backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: redis-backup
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            fsGroup: 1001
          containers:
          - name: backup
            image: ghcr.io/uppnrise/distributed-rate-limiter:backup-tools
            imagePullPolicy: Always
            command: ["/scripts/redis-backup.sh"]
            env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: BACKUP_DIR
              value: "/backups/redis"
            - name: RETENTION_DAYS
              value: "30"
            - name: S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: s3-bucket
                  optional: true
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: aws-access-key-id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: aws-secret-access-key
                  optional: true
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: aws-region
                  optional: true
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            - name: scripts
              mountPath: /scripts
              readOnly: true
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-pvc
          - name: scripts
            configMap:
              name: backup-scripts
              defaultMode: 0755
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-backup
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis-backup
    app.kubernetes.io/component: backup
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: redis-backup
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis-backup
    app.kubernetes.io/component: backup
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: redis-backup
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis-backup
    app.kubernetes.io/component: backup
subjects:
- kind: ServiceAccount
  name: redis-backup
  namespace: rate-limiter
roleRef:
  kind: Role
  name: redis-backup
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis-backup
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
---
apiVersion: v1
kind: Secret
metadata:
  name: backup-secrets
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis-backup
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  s3-bucket: ""  # echo -n "my-backup-bucket" | base64
  aws-access-key-id: ""  # echo -n "AKIAIOSFODNN7EXAMPLE" | base64
  aws-secret-access-key: ""  # echo -n "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" | base64
  aws-region: dXMtd2VzdC0y  # "us-west-2" base64 encoded