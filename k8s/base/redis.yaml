apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: distributed-rate-limiter
spec:
  replicas: 1
  strategy:
    type: Recreate  # Ensure data consistency
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7.4-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        args:
        - --appendonly
        - "yes"
        - --maxmemory
        - 1gb
        - --maxmemory-policy
        - allkeys-lru
        - --tcp-keepalive
        - "60"
        - --timeout
        - "300"
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rate-limiter-secrets
              key: redis-password
              optional: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      # Redis Exporter for Prometheus monitoring
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.66.0
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rate-limiter-secrets
              key: redis-password
              optional: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
      - name: redis-config
        configMap:
          name: redis-config
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: distributed-rate-limiter
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 9121
    targetPort: 9121
    name: metrics
  selector:
    app.kubernetes.io/name: redis
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd  # Adjust based on your cluster's storage classes
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: rate-limiter
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: config
data:
  redis.conf: |
    # Redis production configuration
    bind 0.0.0.0
    port 6379
    protected-mode yes
    tcp-backlog 511
    timeout 300
    tcp-keepalive 60
    
    # Persistence
    appendonly yes
    appendfsync everysec
    save 900 1
    save 300 10
    save 60 10000
    
    # Memory management
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    
    # Logging
    loglevel notice
    syslog-enabled no
    
    # Client management
    maxclients 10000