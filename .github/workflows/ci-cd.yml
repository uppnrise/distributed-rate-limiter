name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  test:
    name: Test & Code Coverage
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests with coverage
      run: ./mvnw clean verify
      
    - name: Generate coverage report
      run: ./mvnw jacoco:report
      
    - name: Check coverage threshold
      run: ./mvnw jacoco:check

    - name: Upload coverage results to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./target/site/jacoco/jacoco.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/failsafe-reports/
          target/site/jacoco/

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run SpotBugs analysis
      run: ./mvnw clean compile spotbugs:check
      
    - name: Run PMD analysis
      run: ./mvnw pmd:check
      
    - name: Run Checkstyle
      run: ./mvnw checkstyle:check
      continue-on-error: true
      
    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-results
        path: target/spotbugsXml.xml

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build application
      run: ./mvnw clean package -DskipTests
      
    - name: Run dependency vulnerability scan
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
      run: ./mvnw org.owasp:dependency-check-maven:check
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: target/dependency-check-report.html

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Start application for load testing
      run: |
        ./mvnw clean package -DskipTests
        java -jar target/distributed-rate-limiter-*.jar &
        echo $! > app.pid
        sleep 30  # Wait for application to start
      env:
        SPRING_PROFILES_ACTIVE: test
        
    - name: Wait for application readiness
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 2; done'
        
    - name: Run basic load test
      run: |
        ./mvnw gatling:test -Dgatling.simulationClass=dev.bnacar.distributedratelimiter.loadtest.BasicLoadTest
      env:
        LOAD_TEST_BASE_URL: http://localhost:8080
        LOAD_TEST_DURATION: 30
        LOAD_TEST_MAX_USERS: 25
        LOAD_TEST_RESPONSE_TIME_THRESHOLD: 1000
        LOAD_TEST_SUCCESS_RATE_THRESHOLD: 90.0
        
    - name: Run stress test (on main branch only)
      if: github.ref == 'refs/heads/main'
      run: |
        ./mvnw gatling:test -Dgatling.simulationClass=dev.bnacar.distributedratelimiter.loadtest.StressTest
      env:
        STRESS_TEST_BASE_URL: http://localhost:8080
        STRESS_TEST_DURATION: 60
        STRESS_TEST_MAX_USERS: 50
        
    - name: Store performance baseline
      run: |
        curl -X POST http://localhost:8080/api/performance/baseline \
          -H "Content-Type: application/json" \
          -d '{
            "testName": "CI-BasicLoadTest",
            "averageResponseTime": 100.0,
            "maxResponseTime": 500.0,
            "throughputPerSecond": 500.0,
            "successRate": 95.0,
            "commitHash": "${{ github.sha }}",
            "buildNumber": "${{ github.run_number }}",
            "environment": "CI"
          }'
      continue-on-error: true
        
    - name: Stop application
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid) || true
          rm app.pid
        fi
        
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: |
          target/gatling/
          target/performance-baselines.json
          
    - name: Upload Gatling reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gatling-reports
        path: target/gatling/*/

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, static-analysis, security-scan, load-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, static-analysis, security-scan, load-test]
    if: always()
    
    steps:
    - name: Check quality gate status
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Tests failed"
          exit 1
        fi
        if [[ "${{ needs.static-analysis.result }}" != "success" ]]; then
          echo "❌ Static analysis failed"
          exit 1
        fi
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ Security scan failed"
          exit 1
        fi
        if [[ "${{ needs.load-test.result }}" != "success" && "${{ needs.load-test.result }}" != "skipped" ]]; then
          echo "❌ Load testing failed"
          exit 1
        fi
        echo "✅ All quality gates passed"